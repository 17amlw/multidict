name: CI

on:
  push:
    branches:
      - master
      - ?.?*  # matches to backport branches, e.g. 3.6
    tags: [ 'v*' ]
  pull_request:
    branches:
      - master
      - ?.?*
  schedule:
    - cron:  '0 6 * * *'  # Daily 6AM UTC build
  

jobs:

  lint:
    name: Linter
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-lint-${{ hashFiles('requirements/*.txt') }}
        path: ~/.cache/pip
        restore-keys: |
            pip-lint-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/lint.txt
    - name: Run linters
      run: |
        make lint
    - name: Install spell checker
      run: |
        sudo apt install libenchant-dev
        pip install -r requirements/doc.txt
    - name: Run docs spelling
      run: |
        make doc-spelling
    - name: Prepare twine checker
      run: |
        pip install -U twine wheel
        python setup.py sdist bdist_wheel
      env:
        MULTIDICT_NO_EXTENSIONS: 1
    - name: Run twine checker
      run: |
        twine check dist/*

  test:
    name: Test
    needs: lint
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        no-extensions: ['', 'Y']
        os: [ubuntu, macos, windows]
        exclude:
          - os: macos
            no-extensions: 'Y'
          - os: windows
            no-extensions: 'Y'
        include:
          - python-version: pypy3
            no-extensions: 'Y'
            os: ubuntu
      fail-fast: false
    runs-on: ${{ matrix.os }}-latest
    timeout-minutes: 15
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"    # - name: Cache
    - name: Cache PyPI
      uses: actions/cache@v2
      with:
        key: pip-ci-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('requirements/*.txt') }}
        path: ${{ steps.pip-cache.outputs.dir }}
        restore-keys: |
            pip-ci-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Install dependencies
      uses: py-actions/py-dependency-install@v2
      with:
        path: requirements/ci.txt
      env:
        MULTIDICT_NO_EXTENSIONS: ${{ matrix.no-extensions }}
    - name: Run unittests
      env:
        COLOR: 'yes'
      run: |
        python -m pytest tests -vv
        python -m coverage xml
    - name: Upload coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unit
        fail_ci_if_error: false

  pre-deploy:
    name: Pre-Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      # manylinux containers don't work with git checkout
      - name: Checkout
        uses: actions/checkout@v2
      - name: Save sources
        uses: actions/upload-artifact@v2
        with:
          name: src
          path: ${{ github.workspace }}

  build-tarball:
    name: Tarball
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Make sdist
      run:
        python setup.py sdist
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist

  build-linux:
    name: Linux
    strategy:
      matrix:
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
        arch: [x86_64, aarch64, i686, ppc64le, s390x]
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: quay.io/pypa/manylinux2014_${{ matrix.arch }}
    needs: pre-deploy
    steps:
    - name: Download
      uses: actions/download-artifact@v2
      with:
        name: src
    - name: Setup venv
      run: |
        /opt/python/${{ matrix.pyver }}/bin/python -m venv .build-venv
    - name: Install tools
      run: |
        source .build-venv/bin/activate
        pip install -U setuptools wheel
    - name: Make wheel
      run: |
        source .build-venv/bin/activate
        python setup.py bdist_wheel
    - name: Repair wheel wheel
      run: |
        source .build-venv/bin/activate
        auditwheel repair dist/*.whl --wheel-dir wheelhouse/
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: dist
        path: dist
    
        

  # deploy:
  #   name: Deploy
  #   needs: e2e
  #   runs-on: ubuntu-latest
  #   # Run only on pushing a tag
  #   if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2
  #   - name: Setup Python 3.8
  #     uses: actions/setup-python@v2
  #     with:
  #       python-version: 3.8
  #   - name: Install dependencies
  #     run: |
  #       make setup
  #       python -m pip install twine
  #   - name: Make dists
  #     run: |
  #       python setup.py sdist bdist_wheel
  #   - name: PyPI upload
  #     env:
  #       TWINE_USERNAME: __token__
  #       TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
  #     run: |
  #       twine upload dist/*
