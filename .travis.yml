conditions: v1
if: >  # Forbid running non-PR pushes from pyup bot
  not (type != pull_request AND branch =~ ^pyup\-scheduled\-update\-)

sudo: false

language: python

python:
- 3.4
- 3.5
- &py36 3.6
- 3.6-dev
- nightly

install: &default_install
- python -m pip install -U tox
- python -m tox --notest  # Pre-populate a virtualenv with dependencies

script: &default_script
- python -m tox

after_success:
- python -m tox -e codecov

_helpers:
- &_mainstream_python_base
  python: *py36
- &_reset_steps
  env: {}
  before_install: skip
  install: skip
  script: skip
  after_success: []
- &_lint_base
  stage: &doc_stage_name docs, linting and pre-test checks
  <<: *_mainstream_python_base
  <<: *_reset_steps
  install: *default_install
  script: *default_script
- &_doc_base
  <<: *_lint_base
  install: *default_install
  after_failure: cat docs/_build/spelling/output.txt
  addons:
    apt:
      packages:
      - libenchant-dev
- &osx_python_base
  stage: &stage_test_osx_name test under OS X (last chance to fail before deploy available)
  os: osx
  language: generic
  python: &pypy3 pypy3.5-5.10.0
  env: &env_pyenv_base
    PYTHON_VERSION: *pypy3
    PATH: ${PYENV_ROOT}/bin:${PATH}
  env: &env_osx_base
    <<: *env_pyenv_base
    PYTHON_VERSION: *pypy3
    MACOSX_DEPLOYMENT_TARGET: 10.6
    PYTHON_CONFIGURE_OPTS: "'--enable-universalsdk=/ --with-universal-archs=intel'"
  before_install: &install-from-pyenv
  - brew update
  - brew install pyenv || brew upgrade pyenv
  - &ensure_pyenv_preloaded |
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
  - &install_python pyenv install --skip-existing --keep --verbose "$PYTHON_VERSION"
  - &switch_python pyenv shell "$PYTHON_VERSION"
  - &python_version python --version
  before_install: &install-from-python_org
  - |
    function probe_url() {
      local py_ver="$1"
      [ $(curl -I --write-out '%{http_code}' --silent --output /dev/null "https://www.python.org/ftp/python/${py_ver}/python-${py_ver}-macosx10.6.pkg") == '200' ] && return 0
      return 1
    }
  - |
    function find_last_macos_py() {
    for py_ver in $*
    do
      >&2 echo Probing $py_ver
      probe_url $py_ver && >&2 echo "Found pkg: ${py_ver}" && echo $py_ver && return 0
    done
    >&2 echo Failed looking up macOS pkg for $*
    return 1
    }
  - export GIT_DMG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.dmg"
  - export GIT_PKG_NAME="git-${GIT_VERSION}-intel-universal-mavericks.pkg"
  - export GIT_DMG_PATH="${GIT_INSTALLER_DIR_PATH}/${GIT_DMG_NAME}"
  - >
    stat "${GIT_DMG_PATH}" &>/dev/null || wget -O "${GIT_DMG_PATH}" "https://sourceforge.net/projects/git-osx-installer/files/${GIT_DMG_NAME}/download?use_mirror=autoselect"
  - stat "${GIT_DMG_PATH}" >/dev/null
  - sudo hdiutil attach ${GIT_DMG_PATH}
  - hdiutil info
  - >
    export GIT_INSTALLER_VOLUME=$(hdiutil info | tail -n1 | sed 's#^.*\(/Volumes.*\)#\1#')
  - >
    export GIT_INSTALLER_PATH="${GIT_INSTALLER_VOLUME}/${GIT_PKG_NAME}"
  - ls -alh "${GIT_INSTALLER_VOLUME}"
  - sudo installer -verboseR -dumplog -pkg "${GIT_INSTALLER_PATH}" -target /
  - sudo hdiutil detach "${GIT_INSTALLER_VOLUME}"
  - export PYTHON_VERSION_LONG_SUGGESTIONS=$(git ls-remote --sort -v:refname --tags git://github.com/python/cpython.git "${PYTHON_VERSION}*" "v${PYTHON_VERSION}*" | grep -v '\^{}$' | awk '{print$2}' | sed 's#^refs/tags/##;s#^v##' | grep -v '[abcepr]')
  - export PYTHON_VERSION_LONG=$(find_last_macos_py $PYTHON_VERSION_LONG_SUGGESTIONS)
  - export PYTHON_VERSION_SHORT=$(echo ${PYTHON_VERSION_LONG} | awk -F. '{print$1"."$2}')
  - echo "Selected version vars are:"
  - echo "PYTHON_VERSION=${PYTHON_VERSION}"
  - echo "PYTHON_VERSION_SHORT=${PYTHON_VERSION_SHORT}"
  - echo "PYTHON_VERSION_LONG=${PYTHON_VERSION_LONG}"
  - export PYTHON_INSTALL_PATH="/Library/Frameworks/Python.framework/Versions/${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALL_EXE="${PYTHON_INSTALL_PATH}/bin/python${PYTHON_VERSION_SHORT}"
  - export PATH="${PYTHON_INSTALL_PATH}/bin:${PATH}"
  - export PYTHON_VENV_PATH="${HOME}/virtualenv/python${PYTHON_VERSION_SHORT}"
  - export PYTHON_INSTALLER_PATH="${PYTHON_INSTALLER_DIR_PATH}/python-${PYTHON_VERSION_LONG}.pkg"
  - echo "PYTHON_INSTALLER_PATH=${PYTHON_INSTALLER_PATH}"
  - env
  - >
    stat "${PYTHON_INSTALLER_PATH}" &>/dev/null || wget -O "${PYTHON_INSTALLER_PATH}" "https://www.python.org/ftp/python/${PYTHON_VERSION_LONG}/python-${PYTHON_VERSION_LONG}-macosx10.6.pkg"
  - stat "${PYTHON_INSTALLER_PATH}" >/dev/null
  - sudo installer -verboseR -dumplog -pkg "${PYTHON_INSTALLER_PATH}" -target /
  - ls "${PYTHON_INSTALL_PATH}/bin"
  - ls -lh "${PYTHON_INSTALL_EXE}"
  - stat "${PYTHON_INSTALL_EXE}"
  - /Applications/Python\ ${PYTHON_VERSION_SHORT}/Install\ Certificates.command || echo "No need to fix certificates"
  - curl https://bootstrap.pypa.io/get-pip.py | ${PYTHON_INSTALL_EXE}
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U pip
  - >
    "${PYTHON_INSTALL_EXE}" -m pip install -U virtualenv
  - >
    "${PYTHON_INSTALL_EXE}" -m virtualenv "${PYTHON_VENV_PATH}"
  - . "${PYTHON_VENV_PATH}/bin/activate"
  - curl https://bootstrap.pypa.io/get-pip.py | python
  - python -m pip install --upgrade pyOpenSSL
  - python --version
  - pip --version
  before_cache:
  - brew --cache
  cache:
    pip: true
    directories:
    - $HOME/Library/Caches/Homebrew
    - $PYTHON_INSTALLER_DIR_PATH
    - $GIT_INSTALLER_DIR_PATH
- &generic_deploy_base
  stage: &deploy_stage_name deploy (PYPI upload itself runs only for tagged commits)
  <<: *_mainstream_python_base
  install: *default_install
  script: *default_script
  before_deploy:
  - echo > setup.py  # make Travis not invoke setuptools, only twine upload
  - pip install --upgrade pyOpenSSL  # Workaround for 'twine' not working on some versions of Mac OSX: pypa/twine#273
  deploy: &deploy_step
    provider: pypi
    # `skip_cleanup: true` is required to preserve binary wheels, built
    # inside of manylinux1 docker container during `script` step above.
    skip_cleanup: true
    skip-existing: true
    user: __token__
    password:
      secure: >-
        LI6iPU1chdwFKOjyWohqqASOvCBHSb3qCs0ViJzOhNsL3PbXqM4NYZFkZPqzyOVR12PSFbiTwN/sg1KZTfMlxsFos8jNSm+WC5yhY2vmUOGQTzA626Cj5IBcB7gH3JqyPMPjOTFZB3wmYGubHVYeDv4RQwLJpPWj9f7EeWjSLEWeJO1tEEd4TcYu69tPn6C06ZSsIbZQDicASmSuubJpHIyUMYvtIClpAld+pM/TGllzZnapyF0NchhAKRUPAwRGvpWP7etOT5G9Yw1rh+p2BZvLzE5SXXbj6YdE+nXyENC6Vlwdc0DRs5rDpryfWMFP5zSe4tLIIUpz/b5vwqBQQhe/xN+4L5JchHAkhrICKBbpFttHB1iS8YRmTHAYzI2e3/yQgKDykcj7Rye1fj7Aaqzf60f2fCUX8C5b5rTlU+fvyM2qJCAVwOGuwWdPrLTasCz21UtUAcDLLCXExWRTtgUbVUHAf93Kyf4qlQrAgWPV+xgMXQffmr4nYU4aq/a6qg5p1NVNgcQ9Mo2RZtXYR0nIPJ+AuLpJC3XruPxp+vyNnqjrctEDJP2gOoVa2rqqhlZUzuGTAGin/BMKRNpam/qBG/vXhgIZYNL416B4MS5T+novYGOotXsijopRAWBPPQcz1QlGQ8yV/ITTqno4b3ZU3ptRxOPqACC7pbijLBs=
    # Although Travis CI instructs `setup.py` to build source distribution,
    # which is default value for distribution option (`distribution: sdist`),
    # it will also upload all wheels we've previously built in manylinux1
    # docker container using `twine upload -r pypi dist/*` command.
    # Also since commit https://github.com/travis-ci/dpl/commit/90b5e39
    # it is default that Travis PYPI provider has `skip_upload_docs: true`
    # set by default.
    # Besides above, we don't do cleanup of `dist/*`, because it's being done
    # by Travis CI PYPI deployment provider after upload, unconditionally.
    on:
      tags: true
      all_branches: true
- &osx_pypi_deploy_base_1011
  <<: *osx_python_base
  <<: *generic_deploy_base
  name: &env_os1011_msg Build and deploy to PYPI of OS X 10.11 binary wheel
  osx_image: xcode7.3
  after_success: []
  env: &env_osx_deploy_base
    <<: *env_pyenv_base
    TOXENV: build-macos-dists
- &osx_pypi_deploy_base_1012
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1012_msg Build and deploy to PYPI of OS X 10.12 binary wheel
  osx_image: xcode8.3
  env: *env_osx_deploy_base
- &osx_pypi_deploy_base_1010
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1010_msg Build and deploy to PYPI of OS X 10.10 binary wheel
  osx_image: xcode6.4
  env: *env_osx_deploy_base
- &osx_pypi_deploy_base_1013
  <<: *osx_pypi_deploy_base_1011
  name: &env_os1013_msg Build and deploy to PYPI of OS X 10.13 binary wheel
  osx_image: xcode9.4
  env: *env_osx_deploy_base
- &linux_py37
  python: 3.7
  dist: xenial
  sudo: required
- &env_extensions_disabled
  # MULTIDICT_NO_EXTENSIONS environment variables
  # are considered as enabled if they are any non-empty strings.
  MULTIDICT_NO_EXTENSIONS: X

env:
  global:
    # Needed for macOS:
    GIT_INSTALLER_DIR_PATH: ${HOME}/.git-installers
    # Needed for macOS:
    GIT_VERSION: 2.20.1
    PYENV_ROOT: ${HOME}/.pyenv
    # Needed for macOS:
    PYTHON_INSTALLER_DIR_PATH: ${HOME}/.python-installers
  matrix:
  - "tests with extensions enabled <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <- <-":
  - <<: *env_extensions_disabled

os: linux

jobs:
  fast_finish: true
  allow_failures:
  - os: osx
    python: nightly

  include:
  - <<: *linux_py37
    name: Python 3.7 env tests with extensions enabled ($TRAVIS_PYTHON_VERSION)

  - <<: *linux_py37
    name: Python 3.7 env tests with extensions disabled
    env: *env_extensions_disabled

  - python: *pypy3
    name: PyPy3.5 env tests with extensions disabled
    env: *env_extensions_disabled

  - <<: *_doc_base
    name: Documentation linting
    env:
      <<: *env_extensions_disabled
      TOXENV: doc-spelling

  - <<: *_lint_base
    name: Flake8 linter
    env:
      <<: *env_extensions_disabled
      TOXENV: flake8

  - <<: *_lint_base
    name: MyPy linter
    env:
      <<: *env_extensions_disabled
      TOXENV: mypy

  - <<: *_lint_base
    name: dist setup check
    env:
      <<: *env_extensions_disabled
      TOXENV: setup-check

  - <<: *osx_python_base
    python: &py34 3.4.4
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py34
  - <<: *osx_python_base
    python: &py35 3.5.4
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py35
  - <<: *osx_python_base
    <<: *_mainstream_python_base
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py36
  - <<: *osx_python_base
    python: &py37 3.7.0
    env:
      <<: *env_osx_base
      PYTHON_VERSION: *py37
  # pypy3.5-5.10.0 fails under OS X because it's unsupported

  # Build and deploy manylinux1 binary wheels and source distribution
  - <<: *_reset_steps
    <<: *generic_deploy_base
    name: Build and deploy to PYPI of manylinux1 binary wheels for all supported Pythons and source distribution
    env:
      TOXENV: build-sdist,manylinux1
    dist: trusty
    group: edge
    services:
    - docker

    # Build and deploy MacOS binary wheels for each OSX+Python combo possible
    # OS X 10.6-10.13, Python 3.4
  - <<: *osx_pypi_deploy_base_1013
    python: *py34
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py34
    # OS X 10.6-10.13, Python 3.5
  - <<: *osx_pypi_deploy_base_1013
    python: *py35
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py35
    # OS X 10.6-10.13, Python 3.6
  - <<: *osx_pypi_deploy_base_1013
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py36
    # OS X 10.6-10.13, Python 3.7
  - <<: *osx_pypi_deploy_base_1013
    env:
      <<: *env_osx_deploy_base
      PYTHON_VERSION: *py37

stages:
- *doc_stage_name
- test
- name: *stage_test_osx_name
  if: type IN (api, cron)
- name: *deploy_stage_name
  # This will prevent deploy unless it's a tagged commit:
  if: tag IS present


cache: pip

before_cache:
- rm -f $HOME/.cache/pip/log/debug.log
